//===========================================================================================\\
//----------------БЛОК КОНСТАНТ И ТИПОВ ДАННЫХ ПРОЕКТА "ОХОТНИК ЗА ГОЛОВАМИ"-----------------\\
//===========================================================================================\\

#pragma once

#include <string>
#include <vector>

namespace gtl_rpg //пространство имен констант и типов данных
{
	//=======================================================================================\\
	//<-----------------------------служебные константы------------------------------------->\\
	//=======================================================================================\\
 
	const int FREE_INDEX = -1;            //константа для обозначения пустого индекса
	const int ZERO = 0;		      //константа для обозначения нулевой величины
	const int PAIR_ARR_SIZE = 2;          //константа размерности для парных элементов
	const int MAX_STACK_SIZE = 99;        //константа максимальной величины стопки
	const int START_LEVEL = 1;            //начальный уровень персонажа/предмета
	const int PERCENT_MOD_CAP = 101;      //константа для извлечения остатка отделения на 100
	const int PERCENT_CAP = 100;		  //константа максимального значения процентных переменных
	const int QUEST_REWARD_LVL_SEED = 2;  //константа разброса уровней награды за квесты

	const int PLAYER_ID = -10;		      //идентификатор персонажа игрока в бою

	const int LIGHT_COVER_ID = -15;		  //идентификатор легкого укрытия
	const int MEDIUM_COVER_ID = -20;	  //идентификатор среднего укрытия
	const int FULL_COVER_ID = -25;		  //идентификатор полного укрытия

	const double CRIT_MODIFIER = 0.33;     //модификатор критического урона

	

	//=======================================================================================\\	
	//=======================================================================================\\

	//=======================================================================================\\
	//<-----------------------------константы конца игры------------------------------------>\\
	//=======================================================================================\\
	
	const int MIN_NUTRITION_VALUE = 0;  //минимальное значение параметра сытости персонажа игрока
	const int MAX_NUTRITION_VALUE = 10; //максимальное значение параметра сытости персонажа игрока

	//=======================================================================================\\
	//=======================================================================================\\


	//=======================================================================================\\
	//----------------------------!МОДИФИКАТОРЫ РОЛЕВОЙ МОДЕЛИ!------------------------------\\
	//------------------применяются при процедуре определения роли моба в паке---------------\\
	//=======================================================================================\\

	//<==========================================================================>\\
	//<------------------------!размеры структур данных!------------------------->\\
	//<---данный раздел содержит константы, определяющие размер ряда массивов,--->\\
	//<-----таких как размер сумки, или дата-хранилища прототипов предметов.----->\\
	//<---------------------------------!!!ВАЖНО!!!------------------------------>\\
	//<==========================================================================>\\
	
	const int VENDOR_SIZE = 20;        //число товаров у торговца
	const int ITEM_STORAGE_SIZE = 100; //размер дата-хранилища прототипов предметов
	const int MOBS_STORAGE_SIZE = 100; //размер дата-хранилища прототипов мобов
	const int PACK_MAX_SIZE = 10;      //максимум мобов в одном паке
	const int MAX_PACKS_COUNT = 5;     //максимум паков в одной локации
	const int LOOT_LIST_SIZE = 16;     //максимум предметов в лут-листе

	//<==========================================================================>\\
	//<---------------------------!типы перечисления!---------------------------->\\
	//<==========================================================================>\\
	
	enum TEquipmentSlots { ES_NONDEF = FREE_INDEX, ES_HEAD, ES_BODY, ES_HANDS, ES_LEGS, ES_BOOTS, ES_MAINHAND, ES_OFFHAND, ES_TRINKET1, ES_TRINKET2, ES_TRINKET3, ES_TRINKET4, ES_CONCEAL1, ES_CONCEAL2, ES_SIZE }; //тип слотов инвентаря
	//es_head-тело , es_body-голова , es_hands-руки , es_legs-ноги , es_boots-обувь , es_mainhand-оружие в основной руке , es_offhand-оружие во второй руке , es_add1-trinket1 , es_add2- trinket2, es_trinket3- trinket3, es_trinket4- trinket4, es_conceal1-спрятанное оружие 1, es_conceal2-спрятанное оружие 2
	enum TItemRareness { IR_NONDEF = FREE_INDEX, IR_TRASH, IR_COMMON, IR_GOOD, IR_RARE, IR_EPIC, IR_LEGENDARY, IR_SIZE }; //тип градации качества предметов
	//ir_trash-мусор, ir_common-обычный, ir_good-хороший, ir_rare-редкий, ir_epiс-эпический, ir_legendary-легендарный
	enum TVendorKind { TK_NONDEF = FREE_INDEX, TK_WEAPON, TK_ARMOR, TK_GEAR, TK_BLACK, TK_SIZE }; //тип видов торговцев
	//vk_weapon- торговец оружием, vk_armor- тороговец броней, vk_gear- торговец снаряжением, vk_black-черный рынок
	enum TLocationKind { LK_NONDEF = FREE_INDEX, LK_CITY, LK_VILLAGE, LK_TUNNEL, LK_ROAD, LK_DOWNTOWN, LK_JAIL, LK_STATION, LK_BASE, LK_WILD, LK_SIZE }; //тип видов локаций
	//lk_city-город, lk_village-деревня, lk_tunnel, туннель, lk_road-дорога, lk_downtown-окрестности города, lk_jail-тюрьма, lk_station-вокзал, lk_hospital-больница, lk_base-база, lk_wild-дикий мир
	enum TEquipmentKind { EK_NONDEF = FREE_INDEX, EK_PISTOL, EK_RIFLE, EK_SMG, EK_SNIPER, EK_MELEE, EK__LIGHT_ARMOR, EK_MEDIUM_ARMOR, EK_HEAVY_ARMOR, EK_SIZE }; //тип видов оружия
	//ek_pistol-пистолеты, ek_rifle-штурмовые винтовки, ek_smg-пистолеты-пулеметы, ek_sniper-снайперские винтовки, ek_melee-холодное оружие
	enum TNPCKind { NK_NONDEF = FREE_INDEX, NK_FRIENDLY, NK_NEUTRAL, NK_ENEMY, NK_SIZE }; //тип отношений НИП к игроку
	//nk_friendly-союзник, nk_neutral-нейтрал, nk_enemy-противник
	enum TAbilityTarget { AT_NONDEF = FREE_INDEX, AT_SELF, AT_FRIENDS, AT_ENEMY, AT_SIZE }; //тип применимости способностей
	//AT_SELF-на себя, AT_FRIENDS-на союзников, AT_ENEMY-на противников
	enum TTargetStat { TS_NONDEF = FREE_INDEX, TS_HP, TS_DEF, TS_DMG, TS_CRIT, TS_INI, TS_SIZE }; //тип параметров, на которые воздействует способность
	//TS_HP-ХП, TS_DEF-защита, TS_DMG-урон, TS_CRIT-шанс крит. урона, TS_INI-инициатива
	enum TPairAffectance { PA_NONDEF = FREE_INDEX, PA_CURRENT, PA_CAP, PA_BOTH, PA_SIZE }; //тип возможных вариантов воздействия на парные параметры
	//PA_CURRENT-воздействие на текущее значение, PA_CAP-воздействие на кап, PA_BOTH-воздействие на оба значения пары
	enum TFieldEditorKind { FE_NONDEF = FREE_INDEX, FE_INCREASE, FE_DECREASE, FE_REPLACE, FE_SIZE }; //тип вариантов воздействия на поля классов
	//FE_INCREASE-повысить значение поля, FE_DECREASE-понизить значение поля, FE_REPLACE-заменить значение поля
	enum TStatInds { SI_ACCURACY, SI_REACTION, SI_STRENGTH, SI_TOUGHNESS, SI_AWARENESS, SI_INTELLIGENCE, SI_PERSUASION, SI_SPEED, SI_SIZE }; //тип индексов характеристик персонажа
	enum TTileList { TL_NONDEF=FREE_INDEX, TL_GRASS, TL_STONE, TL_ROAD, TL_WALL, TL_FLOOR, TL_DESERT, TL_SNOW, TL_WATER, TL_SIZE }; //тип видов тайлов
	//TL_GRASS-трава, TL_STONE-камень, TL_ROAD-дорога, TL_WALL-стена, TL_FLOOR-пол, TL_DESERT-пустыня(песок), TL_SNOW-снег, TL_WATER-вода

	//<==========================================================================>\\
	//<-----------------------!структурные типы данных!-------------------------->\\
	/*<==========================================================================>*/

		struct TBuffData //структура данных бафа
		{
			int from;				   //индекс наложившего баф
			int to;					   //индекс цели бафа
			int time;				   //время до истечения бафа
			bool is_const;			   //является ли  воздействие бафом (не тикает) или дотом/хотом
			TTargetStat kind;          //воздействуемый параметр
			TPairAffectance eff_kind;  //формат воздействия на парный параметр
			int effect[PAIR_ARR_SIZE]; //величина воздействия
		};
		
		struct TMapTile //структура данных тайла карты
		{
			TTileList id;			//тип тайла (для отрисовки)
			int obj[PAIR_ARR_SIZE]; //что/кто на тайле (игрок, моб или укрытие)
			bool passable;			//можно ли стоять на тайле или проходить сквозь него
		};

		struct TQuestData //
		{
			TLootList reward;   //
			bool conditions[4]; //
		};

	//<==========================================================================>\\
	//<==========================================================================>\\
	
	//<==========================================================================>\\
	//<-----------------------------!подпрограммы!------------------------------->\\
	//<==========================================================================>\\
		
		//функция проверки, является ли переменная парным массивом (arsz-размер переменной (если массив, то всего массива целиком),elsz-размер элемента (для одиночных переменных то же что и в arsz))
		bool is_pair_variable(int arsz ,int elsz);
		//функция копирования параметров бафа
		void copy_buff_data(struct TBuffData *from, struct TBuffData *to);
		//функция обмена местами между двумя структурами параметров бафов
		void swap_buff_data(struct TBuffData *from, struct TBuffData *to);
		//функция очистки параметров бафов
		void clear_buff_data(struct TBuffData *data);
		//функция копирования данных тайла
		void copy_maptile_data(struct TMapTile *from, struct TMapTile *to);
		//функция обмена местами двух тайлов
		void swap_maptile_data(struct TMapTile *from, struct TMapTile *to);
		//функция очистки данных тайла
		void clear_maptile_data(struct TMapTile *data);
	
	//<==========================================================================>\\
	//<==========================================================================>\\

}
